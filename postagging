import opennlp.tools.postag.POSModel;
import opennlp.tools.postag.POSTaggerME;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.*;
import java.util.StringTokenizer;

public class POSTaggerHadoop {

    // Mapper Class
    public static class POSMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
        private POSTaggerME posTagger;
        private final static IntWritable one = new IntWritable(1);
        private Text wordTag = new Text();

        @Override
        protected void setup(Context context) throws IOException {
            InputStream modelIn = new FileInputStream("/home/hadoop/models/en-pos-maxent.bin");
            POSModel model = new POSModel(modelIn);
            posTagger = new POSTaggerME(model);
        }

        @Override
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            StringTokenizer tokenizer = new StringTokenizer(line);
            String[] words = new String[tokenizer.countTokens()];
            int i = 0;
            while (tokenizer.hasMoreTokens()) {
                words[i++] = tokenizer.nextToken();
            }
            String[] tags = posTagger.tag(words);
            for (int j = 0; j < words.length; j++) {
                wordTag.set(words[j] + "_" + tags[j]);
                context.write(wordTag, one);
            }
        }
    }

    // Reducer Class
    public static class POSReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            context.write(key, new IntWritable(sum));
        }
    }

    // Driver Class
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "POS Tagger");
        job.setJarByClass(POSTaggerHadoop.class);
        job.setMapperClass(POSMapper.class);
        job.setReducerClass(POSReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
